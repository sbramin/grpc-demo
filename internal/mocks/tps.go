// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sbramin/grpc-demo/cmd/third-party-service/pkg/pb/tps (interfaces: ThirdPartyServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	tps "github.com/sbramin/grpc-demo/cmd/third-party-service/pkg/pb/tps"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockThirdPartyServiceClient is a mock of ThirdPartyServiceClient interface
type MockThirdPartyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockThirdPartyServiceClientMockRecorder
}

// MockThirdPartyServiceClientMockRecorder is the mock recorder for MockThirdPartyServiceClient
type MockThirdPartyServiceClientMockRecorder struct {
	mock *MockThirdPartyServiceClient
}

// NewMockThirdPartyServiceClient creates a new mock instance
func NewMockThirdPartyServiceClient(ctrl *gomock.Controller) *MockThirdPartyServiceClient {
	mock := &MockThirdPartyServiceClient{ctrl: ctrl}
	mock.recorder = &MockThirdPartyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThirdPartyServiceClient) EXPECT() *MockThirdPartyServiceClientMockRecorder {
	return m.recorder
}

// Echo mocks base method
func (m *MockThirdPartyServiceClient) Echo(arg0 context.Context, arg1 *tps.Input, arg2 ...grpc.CallOption) (*tps.Output, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Echo", varargs...)
	ret0, _ := ret[0].(*tps.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockThirdPartyServiceClientMockRecorder) Echo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockThirdPartyServiceClient)(nil).Echo), varargs...)
}
